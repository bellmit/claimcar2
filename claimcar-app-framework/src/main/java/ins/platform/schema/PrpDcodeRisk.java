package ins.platform.schema;

// Generated by Hibernate Tools 3.2.5 (sinosoft version), Don't modify!
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Table;
import javax.persistence.TableGenerator;

import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * POJO Class PrpDcodeRisk
 */
@Entity
@BatchSize(size = 100)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@TableGenerator(name = "utiSequence", table = "UTISEQUENCE", pkColumnName = "GenName", valueColumnName = "GenValue", pkColumnValue = "PRPDCODERISK_PK", allocationSize = 10)
@Table(name = "PRPDCODERISK")
public class PrpDcodeRisk implements java.io.Serializable {
	private static final long serialVersionUID = 1L;
	private PrpDcodeRiskId id;
//	private Integer version;
//	private Date insertTimeForHis;
//	private Date operateTimeForHis;

	@EmbeddedId
	@GeneratedValue(strategy = GenerationType.TABLE, generator = "utiSequence")
	@AttributeOverrides( {
        @AttributeOverride(name = "CODETYPE", column = @Column(name = "CODETYPE", nullable = false, length=20) ), 
        @AttributeOverride(name = "CODECODE", column = @Column(name = "CODECODE", nullable = false, length=30) ), 
        @AttributeOverride(name = "RISKCODE", column = @Column(name = "RISKCODE", nullable = false, length=3) ) } )
	public PrpDcodeRiskId getId() {
		return this.id;
	}

	public void setId(PrpDcodeRiskId id) {
		this.id = id;
	}

	/*@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "INSERTTIMEFORHIS", length=19, insertable = false, updatable = false)
	public Date getInsertTimeForHis() {
		return this.insertTimeForHis;
	}

	public void setInsertTimeForHis(Date insertTimeForHis) {
		this.insertTimeForHis = insertTimeForHis;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "OPERATETIMEFORHIS", length=19, insertable = false)
	public Date getOperateTimeForHis() {
		return this.operateTimeForHis;
	}

	public void setOperateTimeForHis(Date operateTimeForHis) {
		this.operateTimeForHis = operateTimeForHis;
	}*/
}
